// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WSS.Core.Common;
using WSS.Core.Repository;

namespace WSS.Core.Repository.Migrations
{
    [DbContext(typeof(AppDataBaseContext))]
    partial class AppDataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("BirthDay");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobile");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.AppUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserRole");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BillStatus");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("PaymentMethod");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("UserId");

                    b.Property<Guid?>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BillId");

                    b.Property<int?>("ColorId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<decimal?>("Price");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("Quantity");

                    b.Property<int?>("SizeId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("BillDetail");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("IconCss");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<int>("SortOrder");

                    b.Property<int>("Status");

                    b.Property<string>("URL");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Function");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("CanCreate");

                    b.Property<bool?>("CanDelete");

                    b.Property<bool?>("CanRead");

                    b.Property<bool?>("CanUpdate");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("FunctionId");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Head")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsDeteled");

                    b.Property<DateTime?>("ManufactureDate");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<decimal?>("Price");

                    b.Property<int?>("ProductCategoryId");

                    b.Property<decimal?>("PromotionalPrice");

                    b.Property<int?>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("Views");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ColorId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("ProductId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductColor");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.ProductImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("ProductId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.ProductQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ColorId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("SizeId");

                    b.Property<int>("TotalImport");

                    b.Property<int>("TotalSell");

                    b.Property<int>("TotalStock");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductQuantity");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("SizeId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductSize");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.AppUserRole", b =>
                {
                    b.HasOne("WSS.Core.Domain.Entities.AppRole", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WSS.Core.Domain.Entities.AppUser", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.Bill", b =>
                {
                    b.HasOne("WSS.Core.Domain.Entities.AppUser", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.BillDetail", b =>
                {
                    b.HasOne("WSS.Core.Domain.Entities.Bill", "Bills")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId");

                    b.HasOne("WSS.Core.Domain.Entities.Color", "Colors")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("WSS.Core.Domain.Entities.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WSS.Core.Domain.Entities.Size", "Sizes")
                        .WithMany()
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.Permission", b =>
                {
                    b.HasOne("WSS.Core.Domain.Entities.Function", "Functions")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.HasOne("WSS.Core.Domain.Entities.AppRole", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.Product", b =>
                {
                    b.HasOne("WSS.Core.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.ProductColor", b =>
                {
                    b.HasOne("WSS.Core.Domain.Entities.Color", "Colors")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("WSS.Core.Domain.Entities.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.ProductImages", b =>
                {
                    b.HasOne("WSS.Core.Domain.Entities.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.ProductQuantity", b =>
                {
                    b.HasOne("WSS.Core.Domain.Entities.Color", "Colors")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("WSS.Core.Domain.Entities.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WSS.Core.Domain.Entities.Size", "Sizes")
                        .WithMany()
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("WSS.Core.Domain.Entities.ProductSize", b =>
                {
                    b.HasOne("WSS.Core.Domain.Entities.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WSS.Core.Domain.Entities.Size", "Sizes")
                        .WithMany()
                        .HasForeignKey("SizeId");
                });
#pragma warning restore 612, 618
        }
    }
}
